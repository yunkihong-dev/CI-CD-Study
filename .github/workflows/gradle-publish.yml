name: Build and Push Image
on:
  push:
    branches: [ main ]
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # keyless 서명용
      packages: write # GHCR push 권한
    env:
      IMAGE: ghcr.io/${{ github.repository_owner }}/step10-cicd
       steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU and buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.G_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        id: push
        with:
          context: ./step10-cicd
          push: true
          tags: |
            ${{ env.IMAGE }}:latest
            ${{ env.IMAGE }}:${{ github.run_number }}
            ${{ env.IMAGE }}:sha-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            TEAM=chathongpt
            COLOR=${{ secrets.TEAM_COLOR }}

      # Trivy로 빌드된 이미지 scan → 취약점 발견 시 실패 (보안 게이트 역할)
      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: "${{ env.IMAGE }}@${{ steps.push.outputs.digest }}"
          format: "table"
          severity: "CRITICAL,HIGH"
          exit-code: 1

      # CycloneDX 포맷으로 SBOM 생성
      - name: Generate SBOM with Trivy
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: "${{ env.IMAGE }}@${{ steps.push.outputs.digest }}"
          scan-type: "image"
          format: "cyclonedx"
          output: "sbom.json"

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      # 이미지 서명 (keyless)
      - name: Sign Container Image
        env:
          DIGEST: ${{ steps.push.outputs.digest }}
        run: |
          cosign sign --yes \
            ${{ env.IMAGE }}@${DIGEST}

      # sbom.json 파일을 이미지에 증명용으로 첨부
      # 이미지 내부에 GHCR 메타데이터로 구성요소들이 남아있음
      - name: Attest SBOM
        env:
          DIGEST: ${{ steps.push.outputs.digest }}
        run: |
          cosign attest --yes \
            --predicate sbom.json \
            --type cyclonedx \
            ${{ env.IMAGE }}@${DIGEST}
